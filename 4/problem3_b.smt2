(declare-sort Group 0)
(declare-fun app (Group Group) Group)
(declare-fun j () Group)
(declare-fun w () Group)
(declare-fun e () Group)
(declare-fun inv (Group) Group)
(assert (= (app (app j j) j) (app j (app j j))))
(assert (= (app (app j j) w) (app j (app j w))))
(assert (= (app (app j j) e) (app j (app j e))))
(assert (= (app (app j w) j) (app j (app w j))))
(assert (= (app (app j w) w) (app j (app w w))))
(assert (= (app (app j w) e) (app j (app w e))))
(assert (= (app (app j e) j) (app j (app e j))))
(assert (= (app (app j e) w) (app j (app e w))))
(assert (= (app (app j e) e) (app j (app e e))))
(assert (= (app (app w j) j) (app w (app j j))))
(assert (= (app (app w j) w) (app w (app j w))))
(assert (= (app (app w j) e) (app w (app j e))))
(assert (= (app (app w w) j) (app w (app w j))))
(assert (= (app (app w w) w) (app w (app w w))))
(assert (= (app (app w w) e) (app w (app w e))))
(assert (= (app (app w e) j) (app w (app e j))))
(assert (= (app (app w e) w) (app w (app e w))))
(assert (= (app (app w e) e) (app w (app e e))))
(assert (= (app (app e j) j) (app e (app j j))))
(assert (= (app (app e j) w) (app e (app j w))))
(assert (= (app (app e j) e) (app e (app j e))))
(assert (= (app (app e w) j) (app e (app w j))))
(assert (= (app (app e w) w) (app e (app w w))))
(assert (= (app (app e w) e) (app e (app w e))))
(assert (= (app (app e e) j) (app e (app e j))))
(assert (= (app (app e e) w) (app e (app e w))))
(assert (= (app (app e e) e) (app e (app e e))))
(assert (and (= (app e j) j) (= (app j e) j)))
(assert (and (= (app e w) w) (= (app w e) w)))
(assert (= (app e e) e))
(assert (and (= (app j (inv j)) e) (= (app (inv j) j) e)))
(assert (and (= (app w (inv w)) e) (= (app (inv w) w) e)))
(assert (and (= (app e (inv e)) e) (= (app (inv e) e) e)))
(assert (and (distinct w (inv j)) (= (app j w) e) (= (app w j) e)))

(check-sat)
(get-model)
